from typing import List
from collections import deque

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # count islands represented by '1'. 
        rows, cols = len(grid), len(grid[0])

        res = 0
        
        def helper( curr_row, curr_col):
            directions = [(0,1), (1,0), (-1, 0), (0, -1)]
            grid[curr_row][curr_col] = '0'
            q = deque([(curr_row,curr_col)])
            while q:
                cur_r, cur_c = q.popleft()
                
                for direction in directions:
                    if rows > cur_r + direction[0] >= 0 \
                    and cols > cur_c + direction[1] >= 0 \
                    and grid[cur_r + direction[0]][cur_c + direction[1]] == '1': # only add to queue if neighbour is an island
                        grid[cur_r + direction[0]][cur_c + direction[1]] = '0'
                        q.append((cur_r + direction[0], cur_c + direction[1]))
            return grid
                
        for i in range(rows):
            for j in range(cols):

                if grid[i][j] == '1':
                    res += 1
                    helper( i, j)
        return res
    
sol = Solution()
print('test 1')
grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
print(sol.numIslands(grid) == 1)

print('test 2')
grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
print(sol.numIslands(grid) == 3)

print('test 3')
grid = [
  ["1","1","1"],
  ["0","1","0"],
  ["1","1","1"]
]

print(sol.numIslands(grid) == 1)


# TLE
print('test 4')
grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
        ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

print(sol.numIslands(grid) == 1)